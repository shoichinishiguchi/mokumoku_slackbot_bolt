import { SocketModeClient } from '@slack/socket-mode';
import { Logger, LogLevel } from '@slack/logger';
import { InstallProvider, CallbackOptions, InstallProviderOptions, InstallURLOptions } from '@slack/oauth';
import { WebAPICallResult } from '@slack/web-api';
import App from '../App';
import { Receiver } from '../types';
export interface SocketModeReceiverOptions {
    logger?: Logger;
    logLevel?: LogLevel;
    clientId?: string;
    clientSecret?: string;
    stateSecret?: InstallProviderOptions['stateSecret'];
    installationStore?: InstallProviderOptions['installationStore'];
    scopes?: InstallURLOptions['scopes'];
    installerOptions?: InstallerOptions;
    appToken: string;
}
interface InstallerOptions {
    stateStore?: InstallProviderOptions['stateStore'];
    authVersion?: InstallProviderOptions['authVersion'];
    metadata?: InstallURLOptions['metadata'];
    installPath?: string;
    redirectUriPath?: string;
    callbackOptions?: CallbackOptions;
    userScopes?: InstallURLOptions['userScopes'];
    clientOptions?: InstallProviderOptions['clientOptions'];
    authorizationUrl?: InstallProviderOptions['authorizationUrl'];
    port?: number;
}
/**
 * Receives Events, Slash Commands, and Actions of a web socket connection
 */
export default class SocketModeReceiver implements Receiver {
    client: SocketModeClient;
    private app;
    private logger;
    installer: InstallProvider | undefined;
    constructor({ appToken, logger, logLevel, clientId, clientSecret, stateSecret, installationStore, scopes, installerOptions, }: SocketModeReceiverOptions);
    init(app: App): void;
    start(): Promise<void | WebAPICallResult>;
    stop(): Promise<void>;
}
export {};
//# sourceMappingURL=SocketModeReceiver.d.ts.map